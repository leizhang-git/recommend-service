/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class Person implements org.apache.thrift.TBase<Person, Person._Fields>, java.io.Serializable, Cloneable, Comparable<Person> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Person");

  private static final org.apache.thrift.protocol.TField STR1_FIELD_DESC = new org.apache.thrift.protocol.TField("str1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STR2_FIELD_DESC = new org.apache.thrift.protocol.TField("str2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STR3_FIELD_DESC = new org.apache.thrift.protocol.TField("str3", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STR4_FIELD_DESC = new org.apache.thrift.protocol.TField("str4", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STR5_FIELD_DESC = new org.apache.thrift.protocol.TField("str5", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField I1_FIELD_DESC = new org.apache.thrift.protocol.TField("i1", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField I2_FIELD_DESC = new org.apache.thrift.protocol.TField("i2", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField I3_FIELD_DESC = new org.apache.thrift.protocol.TField("i3", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField I4_FIELD_DESC = new org.apache.thrift.protocol.TField("i4", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField I5_FIELD_DESC = new org.apache.thrift.protocol.TField("i5", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField I6_FIELD_DESC = new org.apache.thrift.protocol.TField("i6", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField I7_FIELD_DESC = new org.apache.thrift.protocol.TField("i7", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField I18_FIELD_DESC = new org.apache.thrift.protocol.TField("i18", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField I19_FIELD_DESC = new org.apache.thrift.protocol.TField("i19", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField I10_FIELD_DESC = new org.apache.thrift.protocol.TField("i10", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField L1_FIELD_DESC = new org.apache.thrift.protocol.TField("l1", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField L2_FIELD_DESC = new org.apache.thrift.protocol.TField("l2", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField L3_FIELD_DESC = new org.apache.thrift.protocol.TField("l3", org.apache.thrift.protocol.TType.LIST, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PersonStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PersonTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String str1; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String str2; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String str3; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String str4; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String str5; // required
  public int i1; // required
  public int i2; // required
  public int i3; // required
  public int i4; // required
  public int i5; // required
  public int i6; // required
  public int i7; // required
  public int i18; // required
  public int i19; // required
  public int i10; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> l1; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> l2; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> l3; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STR1((short)1, "str1"),
    STR2((short)2, "str2"),
    STR3((short)3, "str3"),
    STR4((short)4, "str4"),
    STR5((short)5, "str5"),
    I1((short)6, "i1"),
    I2((short)7, "i2"),
    I3((short)8, "i3"),
    I4((short)9, "i4"),
    I5((short)10, "i5"),
    I6((short)11, "i6"),
    I7((short)12, "i7"),
    I18((short)13, "i18"),
    I19((short)14, "i19"),
    I10((short)15, "i10"),
    L1((short)16, "l1"),
    L2((short)17, "l2"),
    L3((short)18, "l3");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STR1
          return STR1;
        case 2: // STR2
          return STR2;
        case 3: // STR3
          return STR3;
        case 4: // STR4
          return STR4;
        case 5: // STR5
          return STR5;
        case 6: // I1
          return I1;
        case 7: // I2
          return I2;
        case 8: // I3
          return I3;
        case 9: // I4
          return I4;
        case 10: // I5
          return I5;
        case 11: // I6
          return I6;
        case 12: // I7
          return I7;
        case 13: // I18
          return I18;
        case 14: // I19
          return I19;
        case 15: // I10
          return I10;
        case 16: // L1
          return L1;
        case 17: // L2
          return L2;
        case 18: // L3
          return L3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __I1_ISSET_ID = 0;
  private static final int __I2_ISSET_ID = 1;
  private static final int __I3_ISSET_ID = 2;
  private static final int __I4_ISSET_ID = 3;
  private static final int __I5_ISSET_ID = 4;
  private static final int __I6_ISSET_ID = 5;
  private static final int __I7_ISSET_ID = 6;
  private static final int __I18_ISSET_ID = 7;
  private static final int __I19_ISSET_ID = 8;
  private static final int __I10_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STR1, new org.apache.thrift.meta_data.FieldMetaData("str1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR2, new org.apache.thrift.meta_data.FieldMetaData("str2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR3, new org.apache.thrift.meta_data.FieldMetaData("str3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR4, new org.apache.thrift.meta_data.FieldMetaData("str4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR5, new org.apache.thrift.meta_data.FieldMetaData("str5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I1, new org.apache.thrift.meta_data.FieldMetaData("i1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I2, new org.apache.thrift.meta_data.FieldMetaData("i2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I3, new org.apache.thrift.meta_data.FieldMetaData("i3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I4, new org.apache.thrift.meta_data.FieldMetaData("i4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I5, new org.apache.thrift.meta_data.FieldMetaData("i5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I6, new org.apache.thrift.meta_data.FieldMetaData("i6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I7, new org.apache.thrift.meta_data.FieldMetaData("i7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I18, new org.apache.thrift.meta_data.FieldMetaData("i18", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I19, new org.apache.thrift.meta_data.FieldMetaData("i19", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I10, new org.apache.thrift.meta_data.FieldMetaData("i10", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.L1, new org.apache.thrift.meta_data.FieldMetaData("l1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.L2, new org.apache.thrift.meta_data.FieldMetaData("l2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.L3, new org.apache.thrift.meta_data.FieldMetaData("l3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Person.class, metaDataMap);
  }

  public Person() {
  }

  public Person(
    java.lang.String str1,
    java.lang.String str2,
    java.lang.String str3,
    java.lang.String str4,
    java.lang.String str5,
    int i1,
    int i2,
    int i3,
    int i4,
    int i5,
    int i6,
    int i7,
    int i18,
    int i19,
    int i10,
    java.util.List<java.lang.String> l1,
    java.util.List<java.lang.String> l2,
    java.util.List<java.lang.String> l3)
  {
    this();
    this.str1 = str1;
    this.str2 = str2;
    this.str3 = str3;
    this.str4 = str4;
    this.str5 = str5;
    this.i1 = i1;
    setI1IsSet(true);
    this.i2 = i2;
    setI2IsSet(true);
    this.i3 = i3;
    setI3IsSet(true);
    this.i4 = i4;
    setI4IsSet(true);
    this.i5 = i5;
    setI5IsSet(true);
    this.i6 = i6;
    setI6IsSet(true);
    this.i7 = i7;
    setI7IsSet(true);
    this.i18 = i18;
    setI18IsSet(true);
    this.i19 = i19;
    setI19IsSet(true);
    this.i10 = i10;
    setI10IsSet(true);
    this.l1 = l1;
    this.l2 = l2;
    this.l3 = l3;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Person(Person other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStr1()) {
      this.str1 = other.str1;
    }
    if (other.isSetStr2()) {
      this.str2 = other.str2;
    }
    if (other.isSetStr3()) {
      this.str3 = other.str3;
    }
    if (other.isSetStr4()) {
      this.str4 = other.str4;
    }
    if (other.isSetStr5()) {
      this.str5 = other.str5;
    }
    this.i1 = other.i1;
    this.i2 = other.i2;
    this.i3 = other.i3;
    this.i4 = other.i4;
    this.i5 = other.i5;
    this.i6 = other.i6;
    this.i7 = other.i7;
    this.i18 = other.i18;
    this.i19 = other.i19;
    this.i10 = other.i10;
    if (other.isSetL1()) {
      java.util.List<java.lang.String> __this__l1 = new java.util.ArrayList<java.lang.String>(other.l1);
      this.l1 = __this__l1;
    }
    if (other.isSetL2()) {
      java.util.List<java.lang.String> __this__l2 = new java.util.ArrayList<java.lang.String>(other.l2);
      this.l2 = __this__l2;
    }
    if (other.isSetL3()) {
      java.util.List<java.lang.String> __this__l3 = new java.util.ArrayList<java.lang.String>(other.l3);
      this.l3 = __this__l3;
    }
  }

  @Override
  public Person deepCopy() {
    return new Person(this);
  }

  @Override
  public void clear() {
    this.str1 = null;
    this.str2 = null;
    this.str3 = null;
    this.str4 = null;
    this.str5 = null;
    setI1IsSet(false);
    this.i1 = 0;
    setI2IsSet(false);
    this.i2 = 0;
    setI3IsSet(false);
    this.i3 = 0;
    setI4IsSet(false);
    this.i4 = 0;
    setI5IsSet(false);
    this.i5 = 0;
    setI6IsSet(false);
    this.i6 = 0;
    setI7IsSet(false);
    this.i7 = 0;
    setI18IsSet(false);
    this.i18 = 0;
    setI19IsSet(false);
    this.i19 = 0;
    setI10IsSet(false);
    this.i10 = 0;
    this.l1 = null;
    this.l2 = null;
    this.l3 = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStr1() {
    return this.str1;
  }

  public Person setStr1(@org.apache.thrift.annotation.Nullable java.lang.String str1) {
    this.str1 = str1;
    return this;
  }

  public void unsetStr1() {
    this.str1 = null;
  }

  /** Returns true if field str1 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr1() {
    return this.str1 != null;
  }

  public void setStr1IsSet(boolean value) {
    if (!value) {
      this.str1 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStr2() {
    return this.str2;
  }

  public Person setStr2(@org.apache.thrift.annotation.Nullable java.lang.String str2) {
    this.str2 = str2;
    return this;
  }

  public void unsetStr2() {
    this.str2 = null;
  }

  /** Returns true if field str2 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr2() {
    return this.str2 != null;
  }

  public void setStr2IsSet(boolean value) {
    if (!value) {
      this.str2 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStr3() {
    return this.str3;
  }

  public Person setStr3(@org.apache.thrift.annotation.Nullable java.lang.String str3) {
    this.str3 = str3;
    return this;
  }

  public void unsetStr3() {
    this.str3 = null;
  }

  /** Returns true if field str3 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr3() {
    return this.str3 != null;
  }

  public void setStr3IsSet(boolean value) {
    if (!value) {
      this.str3 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStr4() {
    return this.str4;
  }

  public Person setStr4(@org.apache.thrift.annotation.Nullable java.lang.String str4) {
    this.str4 = str4;
    return this;
  }

  public void unsetStr4() {
    this.str4 = null;
  }

  /** Returns true if field str4 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr4() {
    return this.str4 != null;
  }

  public void setStr4IsSet(boolean value) {
    if (!value) {
      this.str4 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStr5() {
    return this.str5;
  }

  public Person setStr5(@org.apache.thrift.annotation.Nullable java.lang.String str5) {
    this.str5 = str5;
    return this;
  }

  public void unsetStr5() {
    this.str5 = null;
  }

  /** Returns true if field str5 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr5() {
    return this.str5 != null;
  }

  public void setStr5IsSet(boolean value) {
    if (!value) {
      this.str5 = null;
    }
  }

  public int getI1() {
    return this.i1;
  }

  public Person setI1(int i1) {
    this.i1 = i1;
    setI1IsSet(true);
    return this;
  }

  public void unsetI1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I1_ISSET_ID);
  }

  /** Returns true if field i1 is set (has been assigned a value) and false otherwise */
  public boolean isSetI1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I1_ISSET_ID);
  }

  public void setI1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I1_ISSET_ID, value);
  }

  public int getI2() {
    return this.i2;
  }

  public Person setI2(int i2) {
    this.i2 = i2;
    setI2IsSet(true);
    return this;
  }

  public void unsetI2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I2_ISSET_ID);
  }

  /** Returns true if field i2 is set (has been assigned a value) and false otherwise */
  public boolean isSetI2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I2_ISSET_ID);
  }

  public void setI2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I2_ISSET_ID, value);
  }

  public int getI3() {
    return this.i3;
  }

  public Person setI3(int i3) {
    this.i3 = i3;
    setI3IsSet(true);
    return this;
  }

  public void unsetI3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I3_ISSET_ID);
  }

  /** Returns true if field i3 is set (has been assigned a value) and false otherwise */
  public boolean isSetI3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I3_ISSET_ID);
  }

  public void setI3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I3_ISSET_ID, value);
  }

  public int getI4() {
    return this.i4;
  }

  public Person setI4(int i4) {
    this.i4 = i4;
    setI4IsSet(true);
    return this;
  }

  public void unsetI4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I4_ISSET_ID);
  }

  /** Returns true if field i4 is set (has been assigned a value) and false otherwise */
  public boolean isSetI4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I4_ISSET_ID);
  }

  public void setI4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I4_ISSET_ID, value);
  }

  public int getI5() {
    return this.i5;
  }

  public Person setI5(int i5) {
    this.i5 = i5;
    setI5IsSet(true);
    return this;
  }

  public void unsetI5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I5_ISSET_ID);
  }

  /** Returns true if field i5 is set (has been assigned a value) and false otherwise */
  public boolean isSetI5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I5_ISSET_ID);
  }

  public void setI5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I5_ISSET_ID, value);
  }

  public int getI6() {
    return this.i6;
  }

  public Person setI6(int i6) {
    this.i6 = i6;
    setI6IsSet(true);
    return this;
  }

  public void unsetI6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I6_ISSET_ID);
  }

  /** Returns true if field i6 is set (has been assigned a value) and false otherwise */
  public boolean isSetI6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I6_ISSET_ID);
  }

  public void setI6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I6_ISSET_ID, value);
  }

  public int getI7() {
    return this.i7;
  }

  public Person setI7(int i7) {
    this.i7 = i7;
    setI7IsSet(true);
    return this;
  }

  public void unsetI7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I7_ISSET_ID);
  }

  /** Returns true if field i7 is set (has been assigned a value) and false otherwise */
  public boolean isSetI7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I7_ISSET_ID);
  }

  public void setI7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I7_ISSET_ID, value);
  }

  public int getI18() {
    return this.i18;
  }

  public Person setI18(int i18) {
    this.i18 = i18;
    setI18IsSet(true);
    return this;
  }

  public void unsetI18() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I18_ISSET_ID);
  }

  /** Returns true if field i18 is set (has been assigned a value) and false otherwise */
  public boolean isSetI18() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I18_ISSET_ID);
  }

  public void setI18IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I18_ISSET_ID, value);
  }

  public int getI19() {
    return this.i19;
  }

  public Person setI19(int i19) {
    this.i19 = i19;
    setI19IsSet(true);
    return this;
  }

  public void unsetI19() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I19_ISSET_ID);
  }

  /** Returns true if field i19 is set (has been assigned a value) and false otherwise */
  public boolean isSetI19() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I19_ISSET_ID);
  }

  public void setI19IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I19_ISSET_ID, value);
  }

  public int getI10() {
    return this.i10;
  }

  public Person setI10(int i10) {
    this.i10 = i10;
    setI10IsSet(true);
    return this;
  }

  public void unsetI10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I10_ISSET_ID);
  }

  /** Returns true if field i10 is set (has been assigned a value) and false otherwise */
  public boolean isSetI10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I10_ISSET_ID);
  }

  public void setI10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I10_ISSET_ID, value);
  }

  public int getL1Size() {
    return (this.l1 == null) ? 0 : this.l1.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getL1Iterator() {
    return (this.l1 == null) ? null : this.l1.iterator();
  }

  public void addToL1(java.lang.String elem) {
    if (this.l1 == null) {
      this.l1 = new java.util.ArrayList<java.lang.String>();
    }
    this.l1.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getL1() {
    return this.l1;
  }

  public Person setL1(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> l1) {
    this.l1 = l1;
    return this;
  }

  public void unsetL1() {
    this.l1 = null;
  }

  /** Returns true if field l1 is set (has been assigned a value) and false otherwise */
  public boolean isSetL1() {
    return this.l1 != null;
  }

  public void setL1IsSet(boolean value) {
    if (!value) {
      this.l1 = null;
    }
  }

  public int getL2Size() {
    return (this.l2 == null) ? 0 : this.l2.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getL2Iterator() {
    return (this.l2 == null) ? null : this.l2.iterator();
  }

  public void addToL2(java.lang.String elem) {
    if (this.l2 == null) {
      this.l2 = new java.util.ArrayList<java.lang.String>();
    }
    this.l2.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getL2() {
    return this.l2;
  }

  public Person setL2(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> l2) {
    this.l2 = l2;
    return this;
  }

  public void unsetL2() {
    this.l2 = null;
  }

  /** Returns true if field l2 is set (has been assigned a value) and false otherwise */
  public boolean isSetL2() {
    return this.l2 != null;
  }

  public void setL2IsSet(boolean value) {
    if (!value) {
      this.l2 = null;
    }
  }

  public int getL3Size() {
    return (this.l3 == null) ? 0 : this.l3.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getL3Iterator() {
    return (this.l3 == null) ? null : this.l3.iterator();
  }

  public void addToL3(java.lang.String elem) {
    if (this.l3 == null) {
      this.l3 = new java.util.ArrayList<java.lang.String>();
    }
    this.l3.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getL3() {
    return this.l3;
  }

  public Person setL3(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> l3) {
    this.l3 = l3;
    return this;
  }

  public void unsetL3() {
    this.l3 = null;
  }

  /** Returns true if field l3 is set (has been assigned a value) and false otherwise */
  public boolean isSetL3() {
    return this.l3 != null;
  }

  public void setL3IsSet(boolean value) {
    if (!value) {
      this.l3 = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STR1:
      if (value == null) {
        unsetStr1();
      } else {
        setStr1((java.lang.String)value);
      }
      break;

    case STR2:
      if (value == null) {
        unsetStr2();
      } else {
        setStr2((java.lang.String)value);
      }
      break;

    case STR3:
      if (value == null) {
        unsetStr3();
      } else {
        setStr3((java.lang.String)value);
      }
      break;

    case STR4:
      if (value == null) {
        unsetStr4();
      } else {
        setStr4((java.lang.String)value);
      }
      break;

    case STR5:
      if (value == null) {
        unsetStr5();
      } else {
        setStr5((java.lang.String)value);
      }
      break;

    case I1:
      if (value == null) {
        unsetI1();
      } else {
        setI1((java.lang.Integer)value);
      }
      break;

    case I2:
      if (value == null) {
        unsetI2();
      } else {
        setI2((java.lang.Integer)value);
      }
      break;

    case I3:
      if (value == null) {
        unsetI3();
      } else {
        setI3((java.lang.Integer)value);
      }
      break;

    case I4:
      if (value == null) {
        unsetI4();
      } else {
        setI4((java.lang.Integer)value);
      }
      break;

    case I5:
      if (value == null) {
        unsetI5();
      } else {
        setI5((java.lang.Integer)value);
      }
      break;

    case I6:
      if (value == null) {
        unsetI6();
      } else {
        setI6((java.lang.Integer)value);
      }
      break;

    case I7:
      if (value == null) {
        unsetI7();
      } else {
        setI7((java.lang.Integer)value);
      }
      break;

    case I18:
      if (value == null) {
        unsetI18();
      } else {
        setI18((java.lang.Integer)value);
      }
      break;

    case I19:
      if (value == null) {
        unsetI19();
      } else {
        setI19((java.lang.Integer)value);
      }
      break;

    case I10:
      if (value == null) {
        unsetI10();
      } else {
        setI10((java.lang.Integer)value);
      }
      break;

    case L1:
      if (value == null) {
        unsetL1();
      } else {
        setL1((java.util.List<java.lang.String>)value);
      }
      break;

    case L2:
      if (value == null) {
        unsetL2();
      } else {
        setL2((java.util.List<java.lang.String>)value);
      }
      break;

    case L3:
      if (value == null) {
        unsetL3();
      } else {
        setL3((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STR1:
      return getStr1();

    case STR2:
      return getStr2();

    case STR3:
      return getStr3();

    case STR4:
      return getStr4();

    case STR5:
      return getStr5();

    case I1:
      return getI1();

    case I2:
      return getI2();

    case I3:
      return getI3();

    case I4:
      return getI4();

    case I5:
      return getI5();

    case I6:
      return getI6();

    case I7:
      return getI7();

    case I18:
      return getI18();

    case I19:
      return getI19();

    case I10:
      return getI10();

    case L1:
      return getL1();

    case L2:
      return getL2();

    case L3:
      return getL3();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STR1:
      return isSetStr1();
    case STR2:
      return isSetStr2();
    case STR3:
      return isSetStr3();
    case STR4:
      return isSetStr4();
    case STR5:
      return isSetStr5();
    case I1:
      return isSetI1();
    case I2:
      return isSetI2();
    case I3:
      return isSetI3();
    case I4:
      return isSetI4();
    case I5:
      return isSetI5();
    case I6:
      return isSetI6();
    case I7:
      return isSetI7();
    case I18:
      return isSetI18();
    case I19:
      return isSetI19();
    case I10:
      return isSetI10();
    case L1:
      return isSetL1();
    case L2:
      return isSetL2();
    case L3:
      return isSetL3();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Person)
      return this.equals((Person)that);
    return false;
  }

  public boolean equals(Person that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_str1 = true && this.isSetStr1();
    boolean that_present_str1 = true && that.isSetStr1();
    if (this_present_str1 || that_present_str1) {
      if (!(this_present_str1 && that_present_str1))
        return false;
      if (!this.str1.equals(that.str1))
        return false;
    }

    boolean this_present_str2 = true && this.isSetStr2();
    boolean that_present_str2 = true && that.isSetStr2();
    if (this_present_str2 || that_present_str2) {
      if (!(this_present_str2 && that_present_str2))
        return false;
      if (!this.str2.equals(that.str2))
        return false;
    }

    boolean this_present_str3 = true && this.isSetStr3();
    boolean that_present_str3 = true && that.isSetStr3();
    if (this_present_str3 || that_present_str3) {
      if (!(this_present_str3 && that_present_str3))
        return false;
      if (!this.str3.equals(that.str3))
        return false;
    }

    boolean this_present_str4 = true && this.isSetStr4();
    boolean that_present_str4 = true && that.isSetStr4();
    if (this_present_str4 || that_present_str4) {
      if (!(this_present_str4 && that_present_str4))
        return false;
      if (!this.str4.equals(that.str4))
        return false;
    }

    boolean this_present_str5 = true && this.isSetStr5();
    boolean that_present_str5 = true && that.isSetStr5();
    if (this_present_str5 || that_present_str5) {
      if (!(this_present_str5 && that_present_str5))
        return false;
      if (!this.str5.equals(that.str5))
        return false;
    }

    boolean this_present_i1 = true;
    boolean that_present_i1 = true;
    if (this_present_i1 || that_present_i1) {
      if (!(this_present_i1 && that_present_i1))
        return false;
      if (this.i1 != that.i1)
        return false;
    }

    boolean this_present_i2 = true;
    boolean that_present_i2 = true;
    if (this_present_i2 || that_present_i2) {
      if (!(this_present_i2 && that_present_i2))
        return false;
      if (this.i2 != that.i2)
        return false;
    }

    boolean this_present_i3 = true;
    boolean that_present_i3 = true;
    if (this_present_i3 || that_present_i3) {
      if (!(this_present_i3 && that_present_i3))
        return false;
      if (this.i3 != that.i3)
        return false;
    }

    boolean this_present_i4 = true;
    boolean that_present_i4 = true;
    if (this_present_i4 || that_present_i4) {
      if (!(this_present_i4 && that_present_i4))
        return false;
      if (this.i4 != that.i4)
        return false;
    }

    boolean this_present_i5 = true;
    boolean that_present_i5 = true;
    if (this_present_i5 || that_present_i5) {
      if (!(this_present_i5 && that_present_i5))
        return false;
      if (this.i5 != that.i5)
        return false;
    }

    boolean this_present_i6 = true;
    boolean that_present_i6 = true;
    if (this_present_i6 || that_present_i6) {
      if (!(this_present_i6 && that_present_i6))
        return false;
      if (this.i6 != that.i6)
        return false;
    }

    boolean this_present_i7 = true;
    boolean that_present_i7 = true;
    if (this_present_i7 || that_present_i7) {
      if (!(this_present_i7 && that_present_i7))
        return false;
      if (this.i7 != that.i7)
        return false;
    }

    boolean this_present_i18 = true;
    boolean that_present_i18 = true;
    if (this_present_i18 || that_present_i18) {
      if (!(this_present_i18 && that_present_i18))
        return false;
      if (this.i18 != that.i18)
        return false;
    }

    boolean this_present_i19 = true;
    boolean that_present_i19 = true;
    if (this_present_i19 || that_present_i19) {
      if (!(this_present_i19 && that_present_i19))
        return false;
      if (this.i19 != that.i19)
        return false;
    }

    boolean this_present_i10 = true;
    boolean that_present_i10 = true;
    if (this_present_i10 || that_present_i10) {
      if (!(this_present_i10 && that_present_i10))
        return false;
      if (this.i10 != that.i10)
        return false;
    }

    boolean this_present_l1 = true && this.isSetL1();
    boolean that_present_l1 = true && that.isSetL1();
    if (this_present_l1 || that_present_l1) {
      if (!(this_present_l1 && that_present_l1))
        return false;
      if (!this.l1.equals(that.l1))
        return false;
    }

    boolean this_present_l2 = true && this.isSetL2();
    boolean that_present_l2 = true && that.isSetL2();
    if (this_present_l2 || that_present_l2) {
      if (!(this_present_l2 && that_present_l2))
        return false;
      if (!this.l2.equals(that.l2))
        return false;
    }

    boolean this_present_l3 = true && this.isSetL3();
    boolean that_present_l3 = true && that.isSetL3();
    if (this_present_l3 || that_present_l3) {
      if (!(this_present_l3 && that_present_l3))
        return false;
      if (!this.l3.equals(that.l3))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStr1()) ? 131071 : 524287);
    if (isSetStr1())
      hashCode = hashCode * 8191 + str1.hashCode();

    hashCode = hashCode * 8191 + ((isSetStr2()) ? 131071 : 524287);
    if (isSetStr2())
      hashCode = hashCode * 8191 + str2.hashCode();

    hashCode = hashCode * 8191 + ((isSetStr3()) ? 131071 : 524287);
    if (isSetStr3())
      hashCode = hashCode * 8191 + str3.hashCode();

    hashCode = hashCode * 8191 + ((isSetStr4()) ? 131071 : 524287);
    if (isSetStr4())
      hashCode = hashCode * 8191 + str4.hashCode();

    hashCode = hashCode * 8191 + ((isSetStr5()) ? 131071 : 524287);
    if (isSetStr5())
      hashCode = hashCode * 8191 + str5.hashCode();

    hashCode = hashCode * 8191 + i1;

    hashCode = hashCode * 8191 + i2;

    hashCode = hashCode * 8191 + i3;

    hashCode = hashCode * 8191 + i4;

    hashCode = hashCode * 8191 + i5;

    hashCode = hashCode * 8191 + i6;

    hashCode = hashCode * 8191 + i7;

    hashCode = hashCode * 8191 + i18;

    hashCode = hashCode * 8191 + i19;

    hashCode = hashCode * 8191 + i10;

    hashCode = hashCode * 8191 + ((isSetL1()) ? 131071 : 524287);
    if (isSetL1())
      hashCode = hashCode * 8191 + l1.hashCode();

    hashCode = hashCode * 8191 + ((isSetL2()) ? 131071 : 524287);
    if (isSetL2())
      hashCode = hashCode * 8191 + l2.hashCode();

    hashCode = hashCode * 8191 + ((isSetL3()) ? 131071 : 524287);
    if (isSetL3())
      hashCode = hashCode * 8191 + l3.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Person other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStr1(), other.isSetStr1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str1, other.str1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStr2(), other.isSetStr2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str2, other.str2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStr3(), other.isSetStr3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str3, other.str3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStr4(), other.isSetStr4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str4, other.str4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStr5(), other.isSetStr5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str5, other.str5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI1(), other.isSetI1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i1, other.i1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI2(), other.isSetI2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i2, other.i2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI3(), other.isSetI3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i3, other.i3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI4(), other.isSetI4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i4, other.i4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI5(), other.isSetI5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i5, other.i5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI6(), other.isSetI6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i6, other.i6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI7(), other.isSetI7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i7, other.i7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI18(), other.isSetI18());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI18()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i18, other.i18);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI19(), other.isSetI19());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI19()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i19, other.i19);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetI10(), other.isSetI10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i10, other.i10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetL1(), other.isSetL1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l1, other.l1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetL2(), other.isSetL2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l2, other.l2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetL3(), other.isSetL3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l3, other.l3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Person(");
    boolean first = true;

    sb.append("str1:");
    if (this.str1 == null) {
      sb.append("null");
    } else {
      sb.append(this.str1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str2:");
    if (this.str2 == null) {
      sb.append("null");
    } else {
      sb.append(this.str2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str3:");
    if (this.str3 == null) {
      sb.append("null");
    } else {
      sb.append(this.str3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str4:");
    if (this.str4 == null) {
      sb.append("null");
    } else {
      sb.append(this.str4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str5:");
    if (this.str5 == null) {
      sb.append("null");
    } else {
      sb.append(this.str5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i1:");
    sb.append(this.i1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i2:");
    sb.append(this.i2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i3:");
    sb.append(this.i3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i4:");
    sb.append(this.i4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i5:");
    sb.append(this.i5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i6:");
    sb.append(this.i6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i7:");
    sb.append(this.i7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i18:");
    sb.append(this.i18);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i19:");
    sb.append(this.i19);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i10:");
    sb.append(this.i10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("l1:");
    if (this.l1 == null) {
      sb.append("null");
    } else {
      sb.append(this.l1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("l2:");
    if (this.l2 == null) {
      sb.append("null");
    } else {
      sb.append(this.l2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("l3:");
    if (this.l3 == null) {
      sb.append("null");
    } else {
      sb.append(this.l3);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PersonStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PersonStandardScheme getScheme() {
      return new PersonStandardScheme();
    }
  }

  private static class PersonStandardScheme extends org.apache.thrift.scheme.StandardScheme<Person> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Person struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STR1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str1 = iprot.readString();
              struct.setStr1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STR2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str2 = iprot.readString();
              struct.setStr2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STR3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str3 = iprot.readString();
              struct.setStr3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STR4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str4 = iprot.readString();
              struct.setStr4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STR5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str5 = iprot.readString();
              struct.setStr5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // I1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i1 = iprot.readI32();
              struct.setI1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // I2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i2 = iprot.readI32();
              struct.setI2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // I3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i3 = iprot.readI32();
              struct.setI3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // I4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i4 = iprot.readI32();
              struct.setI4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // I5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i5 = iprot.readI32();
              struct.setI5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // I6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i6 = iprot.readI32();
              struct.setI6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // I7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i7 = iprot.readI32();
              struct.setI7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // I18
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i18 = iprot.readI32();
              struct.setI18IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // I19
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i19 = iprot.readI32();
              struct.setI19IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // I10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i10 = iprot.readI32();
              struct.setI10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // L1
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.l1 = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.l1.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setL1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // L2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.l2 = new java.util.ArrayList<java.lang.String>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.l2.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setL2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // L3
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.l3 = new java.util.ArrayList<java.lang.String>(_list6.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.l3.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setL3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Person struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.str1 != null) {
        oprot.writeFieldBegin(STR1_FIELD_DESC);
        oprot.writeString(struct.str1);
        oprot.writeFieldEnd();
      }
      if (struct.str2 != null) {
        oprot.writeFieldBegin(STR2_FIELD_DESC);
        oprot.writeString(struct.str2);
        oprot.writeFieldEnd();
      }
      if (struct.str3 != null) {
        oprot.writeFieldBegin(STR3_FIELD_DESC);
        oprot.writeString(struct.str3);
        oprot.writeFieldEnd();
      }
      if (struct.str4 != null) {
        oprot.writeFieldBegin(STR4_FIELD_DESC);
        oprot.writeString(struct.str4);
        oprot.writeFieldEnd();
      }
      if (struct.str5 != null) {
        oprot.writeFieldBegin(STR5_FIELD_DESC);
        oprot.writeString(struct.str5);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(I1_FIELD_DESC);
      oprot.writeI32(struct.i1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I2_FIELD_DESC);
      oprot.writeI32(struct.i2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I3_FIELD_DESC);
      oprot.writeI32(struct.i3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I4_FIELD_DESC);
      oprot.writeI32(struct.i4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I5_FIELD_DESC);
      oprot.writeI32(struct.i5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I6_FIELD_DESC);
      oprot.writeI32(struct.i6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I7_FIELD_DESC);
      oprot.writeI32(struct.i7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I18_FIELD_DESC);
      oprot.writeI32(struct.i18);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I19_FIELD_DESC);
      oprot.writeI32(struct.i19);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I10_FIELD_DESC);
      oprot.writeI32(struct.i10);
      oprot.writeFieldEnd();
      if (struct.l1 != null) {
        oprot.writeFieldBegin(L1_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.l1.size()));
          for (java.lang.String _iter9 : struct.l1)
          {
            oprot.writeString(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.l2 != null) {
        oprot.writeFieldBegin(L2_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.l2.size()));
          for (java.lang.String _iter10 : struct.l2)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.l3 != null) {
        oprot.writeFieldBegin(L3_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.l3.size()));
          for (java.lang.String _iter11 : struct.l3)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PersonTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PersonTupleScheme getScheme() {
      return new PersonTupleScheme();
    }
  }

  private static class PersonTupleScheme extends org.apache.thrift.scheme.TupleScheme<Person> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStr1()) {
        optionals.set(0);
      }
      if (struct.isSetStr2()) {
        optionals.set(1);
      }
      if (struct.isSetStr3()) {
        optionals.set(2);
      }
      if (struct.isSetStr4()) {
        optionals.set(3);
      }
      if (struct.isSetStr5()) {
        optionals.set(4);
      }
      if (struct.isSetI1()) {
        optionals.set(5);
      }
      if (struct.isSetI2()) {
        optionals.set(6);
      }
      if (struct.isSetI3()) {
        optionals.set(7);
      }
      if (struct.isSetI4()) {
        optionals.set(8);
      }
      if (struct.isSetI5()) {
        optionals.set(9);
      }
      if (struct.isSetI6()) {
        optionals.set(10);
      }
      if (struct.isSetI7()) {
        optionals.set(11);
      }
      if (struct.isSetI18()) {
        optionals.set(12);
      }
      if (struct.isSetI19()) {
        optionals.set(13);
      }
      if (struct.isSetI10()) {
        optionals.set(14);
      }
      if (struct.isSetL1()) {
        optionals.set(15);
      }
      if (struct.isSetL2()) {
        optionals.set(16);
      }
      if (struct.isSetL3()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetStr1()) {
        oprot.writeString(struct.str1);
      }
      if (struct.isSetStr2()) {
        oprot.writeString(struct.str2);
      }
      if (struct.isSetStr3()) {
        oprot.writeString(struct.str3);
      }
      if (struct.isSetStr4()) {
        oprot.writeString(struct.str4);
      }
      if (struct.isSetStr5()) {
        oprot.writeString(struct.str5);
      }
      if (struct.isSetI1()) {
        oprot.writeI32(struct.i1);
      }
      if (struct.isSetI2()) {
        oprot.writeI32(struct.i2);
      }
      if (struct.isSetI3()) {
        oprot.writeI32(struct.i3);
      }
      if (struct.isSetI4()) {
        oprot.writeI32(struct.i4);
      }
      if (struct.isSetI5()) {
        oprot.writeI32(struct.i5);
      }
      if (struct.isSetI6()) {
        oprot.writeI32(struct.i6);
      }
      if (struct.isSetI7()) {
        oprot.writeI32(struct.i7);
      }
      if (struct.isSetI18()) {
        oprot.writeI32(struct.i18);
      }
      if (struct.isSetI19()) {
        oprot.writeI32(struct.i19);
      }
      if (struct.isSetI10()) {
        oprot.writeI32(struct.i10);
      }
      if (struct.isSetL1()) {
        {
          oprot.writeI32(struct.l1.size());
          for (java.lang.String _iter12 : struct.l1)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetL2()) {
        {
          oprot.writeI32(struct.l2.size());
          for (java.lang.String _iter13 : struct.l2)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetL3()) {
        {
          oprot.writeI32(struct.l3.size());
          for (java.lang.String _iter14 : struct.l3)
          {
            oprot.writeString(_iter14);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.str1 = iprot.readString();
        struct.setStr1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.str2 = iprot.readString();
        struct.setStr2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.str3 = iprot.readString();
        struct.setStr3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.str4 = iprot.readString();
        struct.setStr4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.str5 = iprot.readString();
        struct.setStr5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.i1 = iprot.readI32();
        struct.setI1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.i2 = iprot.readI32();
        struct.setI2IsSet(true);
      }
      if (incoming.get(7)) {
        struct.i3 = iprot.readI32();
        struct.setI3IsSet(true);
      }
      if (incoming.get(8)) {
        struct.i4 = iprot.readI32();
        struct.setI4IsSet(true);
      }
      if (incoming.get(9)) {
        struct.i5 = iprot.readI32();
        struct.setI5IsSet(true);
      }
      if (incoming.get(10)) {
        struct.i6 = iprot.readI32();
        struct.setI6IsSet(true);
      }
      if (incoming.get(11)) {
        struct.i7 = iprot.readI32();
        struct.setI7IsSet(true);
      }
      if (incoming.get(12)) {
        struct.i18 = iprot.readI32();
        struct.setI18IsSet(true);
      }
      if (incoming.get(13)) {
        struct.i19 = iprot.readI32();
        struct.setI19IsSet(true);
      }
      if (incoming.get(14)) {
        struct.i10 = iprot.readI32();
        struct.setI10IsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list15 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.l1 = new java.util.ArrayList<java.lang.String>(_list15.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readString();
            struct.l1.add(_elem16);
          }
        }
        struct.setL1IsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list18 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.l2 = new java.util.ArrayList<java.lang.String>(_list18.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.l2.add(_elem19);
          }
        }
        struct.setL2IsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.l3 = new java.util.ArrayList<java.lang.String>(_list21.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.l3.add(_elem22);
          }
        }
        struct.setL3IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

