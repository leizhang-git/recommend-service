<?xml version="1.0" encoding="UTF-8"?>
<!-- scan="true"表示配置文件发生改变时自动更新,scanPeriod表示多久扫描一次配置文件看是否更新 debug="true"会打印logback内部的日志信息，查看运行状态 -->
<configuration scan="true" scanPeriod="60 seconds" debug="true">

    <!--日志格式应用spring boot默认的格式，也可以自己更改-->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <!--定义日志存放的位置，默认存放在项目启动的相对路径的目录-->
    <property  name="LOG_PATH" value="${user.dir}/app-log"  defaultValue="app-log"/>

    <!-- ****************************************************************************************** -->
    <!-- ************************************** 参考文档 ******************************************** -->
    <!-- *********************** https://www.jianshu.com/p/39799c9fcebf *************************** -->
    <!-- ********************* https://developer.aliyun.com/article/1055500 *********************** -->
    <!-- ****************************************************************************************** -->
    <!-- ****************************************************************************************** -->
    <!-- **** 放到服务器上不管在什么环境都只在文件记录日志，控制台（catalina.out）打印logback捕获不到的日志 ***** -->
    <!-- ****************************************************************************************** -->

        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>${CONSOLE_LOG_PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <!-- 日志记录器，日期滚动记录 -->
        <appender name="FILE_ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 正在记录的日志文件的路径及文件名 -->
            <file>${LOG_PATH}/log_total.log</file>
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

                <!-- 归档的日志文件的路径，%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
                <fileNamePattern>${LOG_PATH}/total/log-total-%d{yyyy-MM-dd}.%i.log</fileNamePattern>

                <!-- 除按日志记录之外，还配置了日志文件不能超过64M，若超过64M，日志文件会以索引0开始，
                命名日志文件，例如log-error-2013-12-21.0.log -->
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>10MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <!-- 追加方式记录日志 -->
            <append>true</append>
            <!-- 立即刷新，设置成false可以提高日志吞吐量 -->
            <immediateFlush>true</immediateFlush>
            <!-- 日志文件的格式 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <!--  Logback异步日志  -->
        <appender name="APPENDER_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
            <!--  AsyncAppender使用List存储Appender-ref配置的引用实际输出的appender
                 但是在AsyncAppenderBase#addAppender方法中做了控制只能第一个appender-ref 配置生效-->
            <appender-ref ref="FILE_ALL"/>

            <!--  queueSize队列大小，默认256  -->
            <queueSize>10000</queueSize>
            <!--  queueSize队列大小，默认256  -->
            <maxFlushTime>1000</maxFlushTime>
            <!-- discardingThreshold，默认为-1，当队列还有20%容量时，会丢弃日志（这里指info及以下级别才会丢弃），设置为 0 可以不丢弃-->
            <discardingThreshold>0</discardingThreshold>
            <!-- neverBlock当队列满了后是阻塞线程还是丢日志，默认是false，阻塞线程，这里要注意一下 -->
            <neverBlock>true</neverBlock>
            <!--   includeCallerData是否提取调用者信息，默认为false，一般不用配置         -->
            <includeCallerData>false</includeCallerData>
        </appender>

        <root level="debug">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="APPENDER_ASYNC"/>
        </root>

        <logger name="com.recommend" level="info" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="APPENDER_ASYNC"/>
        </logger>

        <logger name="org.apache.http" level="info" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="APPENDER_ASYNC"/>
        </logger>

        <logger name="org.springframework.web.client.RestTemplate" level="info" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="APPENDER_ASYNC"/>
        </logger>
</configuration>


